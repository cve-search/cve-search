#! /usr/local/bin/python3
# license : GWL (Global Wimming License) --
# Means that you can do whatever you want with this code as long as
# you make it better and don't use it commercially. For the rest ... WIMMING!

# Make sure these modules are on your system :)

import pymongo
import sys
import re
import argparse

# connect to DB
# todo1 : offload db config to config file
connect = pymongo.Connection()
db = connect.cvedb
collection = db.cves

# init control variables
csvOutput = 0
htmlOutput = 0
jsonOutput = 0
xmlOutput = 0

# init various variables :-)
vSearch = ""
vOutput = ""
vFreeSearch = ""

# parse command-line arguments
argParser = argparse.ArgumentParser(description='Search for vulnerabilities in the National Vulnerability DB. Data from http://nvd.nist.org.')
argParser.add_argument('-p', type=str, help='S = search product, e.g. o:microsoft:windows_7 or o:cisco:ios:12.1')
argParser.add_argument('-f', type=str, help='F = free text search in vulnerability summary')
argParser.add_argument('-c', action='append', help='search one or more CVE-ID')
argParser.add_argument('-o', type=str, help='O = output format [csv|html|json|xml]')
argParser.add_argument('-l', action='store_true', help='sort in descending mode')
args = argParser.parse_args()
vSearch = args.p
cveSearch = args.c
vOutput = args.o
vFreeSearch = args.f
sLatest = args.l

# replace special characters in vSearch with encoded version.
# Basically cuz I'm to lazy to handle conversion on DB creation ...
if vSearch:
	vSearch = re.sub(r'\(','%28', vSearch)
	vSearch = re.sub(r'\)','%29', vSearch)

# define which output to generate, xml is not supported yet.
if vOutput == "csv":
	csvOutput = 1
elif vOutput == "html":
	htmlOutput = 1
elif vOutput == "xml":
	xmlOutput = 1
elif vOutput == "json":
	jsonOutput = 1

# Print first line of html output
if htmlOutput:
	print("<html><body><h1>"+sys.argv[1]+"</h1>")


# search default is ascending mode
sorttype=1
if sLatest:sorttype=-1

print (cveSearch)
if cveSearch:
    for cveid in cveSearch:
        for item in collection.find({'id': cveid}).sort("last-modified",sorttype):
            print(item)
# Basic freetext search (in vulnerability summary). 
# todo2 : elaborate on freetext search and integrate with fancy output 
if vFreeSearch:
    for item in collection.find({'summary': {'$regex' :  re.compile(vFreeSearch, re.IGNORECASE)}}).sort("last-modified",sorttype):
        print(item)
# Search Product (best to use CPE notation, e.g. cisco:ios:12.2
if vSearch:
	for item in collection.find({"vulnerable_configuration": {'$regex' : vSearch}}).sort("last-modified",sorttype):
		# the scvOutput module is far from finished !!
		if csvOutput:
			# need to find a way to include 1 (vendor) link in general product searches
			# probably using a command line parameter.
			for entry in item['references']:
				if re.search("http://www.cisco.com",entry):
					link = entry
				else:
					link = "[no vendor link found]"

				print(item['id']+"|"+item['Published']+"|"+item['cvss']+"|"+item['summary']+"|"+link)
		# html output, works ... might want to fancy it up.
		elif htmlOutput:
			print("<h2>"+item['id']+"<br></h2>CVSS score: "+item['cvss']+"<br>"+"<b>"+item['Published']+"<b><br>"+item['summary']+"<br>")
			print("References:<br>")
			for entry in item['references']:
				print(entry+"<br>")
			print("<hr><hr>") 		
		# just dump the json from MongoDB
		elif jsonOutput:
			print(item)
		# plain text output, nothing fancy, just works.
		else:
			print("CVE\t: " + item['id'])
			print("DATE\t: " + item['Published'])
			print("CVSS\t: " + item['cvss'])
			print(item['summary'])
			print("\nReferences:")
			print("-----------")
			for entry in item['references']:
				print(entry)
			print("\nVulnerable Configs:")
			print("-------------------")
			for entry in item['vulnerable_configuration']:
				print(entry)
			print("\n\n")
#close the html output properly
if htmlOutput:
	print("</body></html>")
