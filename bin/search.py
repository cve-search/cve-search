# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import argparse
from CVEFinder import CVEFinder
from lib import CVEs

if __name__ == "__main__":
	argParser = argparse.ArgumentParser(description='Search for vulnerabilities in the National Vulnerability DB. Data from http://nvd.nist.org.')
	argParser.add_argument('-p', type=str, help='S = search product, e.g. o:microsoft:windows_7 or o:cisco:ios:12.1')
	argParser.add_argument('-f', type=str, help='F = free text search in vulnerability summary')
	argParser.add_argument('-c', action='append', help='search one or more CVE-ID')
	argParser.add_argument('-o', type=str, help='O = output format [csv|html|json|xml|cveid]')
	argParser.add_argument('-l', action='store_true', help='sort in descending mode')
	argParser.add_argument('-n', action='store_true', help='lookup complete cpe (Common Platform Enumeration) name for vulnerable configuration')
	argParser.add_argument('-r', action='store_true', help='lookup ranking of vulnerable configuration')
	argParser.add_argument('-a', default=False, action='store_true', help='Lookup CAPEC for related CWE weaknesses')
	argParser.add_argument('-v', type=str, help='vendor name to lookup in reference URLs')
	argParser.add_argument('-s', type=float, help='Specify the CVSS score lower bound')

	args = argParser.parse_args()
	cvss_lower_bound = args.s if args.s else 0.0
	sort_type = -11 if args.l else 1

	rankinglookup = args.r
	namelookup = args.n
	capeclookup = args.a

	cves = CVEs.last(rankinglookup=rankinglookup, namelookup=namelookup, capeclookup=capeclookup)
	cve_finder = CVEFinder(cves, rankinglookup, namelookup, capeclookup)

	search_results = []	
	if args.p:
		results = cve_finder.product_search(args.p, cvss_lower_bound, sort_type)
		if args.o == "csv":
			cve_finder.print_csv(results, args.v)
		if args.o == "html":
			cve_finder.print_html(results, args.p)
		elif args.o == "xml":
			cve_finder.print_xml(results)
		elif args.o == "json": 
			cve_finder.print_json(results)
		else:
			cve_finder.print_txt(results)

	if args.f:
		results = cve_finder.free_search(pattern, sort_type)
		print(results)
	if args.c:
		cve_finder.cve_search(args.c, sort_type)
