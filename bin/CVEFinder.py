# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import csv
import re
from urllib.parse import urlparse
import json
from bson import json_util
from lib.Config import Configuration

class CVEFinder():
    def __init__(self, cves): 
		# connect to DB
        self.cves = cves
        db = Configuration.getMongoConnection()
        self.collection = db.cves

    def product_search(self, pattern, cvss_lower_bound, sort_type):
        pattern = re.sub(r'\(', '%28', pattern)
        pattern = re.sub(r'\)', '%29', pattern)
        return self.collection.find({'$and' : [{"vulnerable_configuration" : {'$regex' : pattern}}, {"cvss" : {'$gt' : cvss_lower_bound}}]}).sort("Modified", sort_type)

    def free_search(self, pattern, sort_type):
        return self.collection.find({'summary': {'$regex': re.compile(pattern, re.IGNORECASE)}}).sort("Modified", sorttype) 

    def cve_search(self):
        pass
        
    def print_txt(self, items, namelookup):
        for item in items:
            print("CVE\t: " + item['id'])
            print("DATE\t: " + item['Published'])
            print("CVSS\t: " + str(item['cvss']))
            print(item['summary'])
            print("\nReferences:")
            print("-----------")
            for entry in item['references']:
                print(entry)
            print("\nVulnerable Configs:")
            print("-------------------")
            for entry in item['vulnerable_configuration']:
                if not namelookup:
                    print(entry)
                else:
                    print(self.cves.getcpe(cpeid=entry))
            print("\n\n")

