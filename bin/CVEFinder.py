# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import csv
import re
from urllib.parse import urlparse
import json
from bson import json_util
from lib.Config import Configuration

class CVEFinder():
    def __init__(self, cves, rankinglookup, namelookup, capeclookup): 
        self.cves = cves
        self.rankinglookup = rankinglookup
        self.namelookup = namelookup
        self.capeclookup = capeclookup
        db = Configuration.getMongoConnection()
        self.collection = db.cves

    def product_search(self, pattern, cvss_lower_bound, sort_type):
        pattern = re.sub(r'\(', '%28', pattern)
        pattern = re.sub(r'\)', '%29', pattern)
        return self.collection.find({'$and' : [{"vulnerable_configuration" : {'$regex' : pattern}}, {"cvss" : {'$gt' : cvss_lower_bound}}]}).sort("Modified", sort_type)

    def free_search(self, pattern, sort_type):
        return self.collection.find({'summary': {'$regex': re.compile(pattern, re.IGNORECASE)}}).sort("Modified", sorttype) 

    def cve_search(self, cve_ids, sort_type):
        for cve_id in cve_ids:
            for item in self.collection.find({'id': cve_id}).sort("Modified", sort_type):
                self.print_cve(item)

    def print_cve(self, item):
        if not self.namelookup and not self.rankinglookup and not self.capeclookup:
            print(json.dumps(item, sort_keys=True, default=json_util.default))
        else:
            if "vulnerable_configuration" in item:
                vulconf = []
                ranking = []
                for conf in item['vulnerable_configuration']:
                    if self.namelookup:
                        vulconf.append(self.cves.getcpe(cpeid=conf))
                    if rankinglookup:
                        rank = self.cves.getranking(cpeid=conf)
                        if rank and rank not in ranking:
                            ranking.append(rank)
                if self.namelookup:
                    item['vulnerable_configuration'] = vulconf
                if self.rankinglookup:
                    item['ranking'] = ranking
                if "cwe" in item and self.capeclookup:
                    if item['cwe'].lower() != 'unknown':
                        item['capec'] = self.cves.getcapec(cweid=(item['cwe'].split('-')[1]))
                print(json.dumps(item, sort_keys=True, default=json_util.default))

    def print_txt(self, items):
        for item in items:
            print("CVE\t: " + item['id'])
            print("DATE\t: " + item['Published'])
            print("CVSS\t: " + str(item['cvss']))
            print(item['summary'])
            print("\nReferences:")
            print("-----------")
            for entry in item['references']:
                print(entry)
            print("\nVulnerable Configs:")
            print("-------------------")
            for entry in item['vulnerable_configuration']:
                if not self.namelookup:
                    print(entry)
                else:
                    print(self.cves.getcpe(cpeid=entry))
            print("\n\n")

    def print_csv(self, items, vendor):
        for item in items:
            refs = []
            for entry in item['references']:
                if vendor is not None:
                    url = urlparse(entry)
                    hostname = url.netloc
                    if re.search(args.v, hostname):
                        refs.append(entry)
            if not refs:
                refs = "[no vendor link found]"
            if self.namelookup:
                nl = " ".join(item['vulnerable_configuration'])
            csvoutput = csv.writer(sys.stdout, delimiter='|', quotechar='|', quoting=csv.QUOTE_MINIMAL)
            if not self.namelookup:
                csvoutput.writerow([item['id'], item['Published'], item['cvss'], item['summary'], refs])
            else:
                csvoutput.writerow([item['id'], item['Published'], item['cvss'], item['summary'], refs, nl])

    def print_html(self, items, header):
        print("<html><body><h1>CVE search " + header + " </h1>")
        for item in items:
            print("<h2>" + item['id'] + "<br></h2>CVSS score: " + str(item['cvss']) + "<br>" + "<b>" + item['Published'] + "<b><br>" + item['summary'] + "<br>")
            print("References:<br>")
            for entry in item['references']:
                print(entry + "<br>")
            print("<hr><hr>") 
        print("</body></html>")

    def print_xml(self, items):
        from xml.etree.ElementTree import Element, SubElement, tostring
        from xml.sax.saxutils import escape as SaxEscape
        r = Element('cve-search')
        for item in items:
            c = SubElement(r, 'id')
            c.text = item['id']
            c = SubElement(r, 'Published')
            c.text = item['Published']
            c = SubElement(r, 'cvss')
            c.text = str(item['cvss'])
            c = SubElement(r, 'summary')
            c.text = SaxEscape(item['summary'])
            for e in item['references']:
                c = SubElement(r, 'references')
                c.text = SaxEscape(e)
            for e in item['vulnerable_configuration']:
                c = SubElement(r, 'vulnerable_configuration')
                c.text = SaxEscape(e)       
            s = tostring(r).decode("utf-8")
            print(s)

    def print_json(self, items):
        for item in items:
            self.print_cve(item) 

