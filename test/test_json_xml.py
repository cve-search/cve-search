import unittest
import os
import logging
from xml.sax import make_parser
import lib.DatabaseLayer as db
import datetime
import sys
from lib.Config import Configuration
from sbin.db_mgmt import (CVEHandler, CVESJsonParser, all_software_version, cveStartYear, year,
                          xml_file_suffix, json_file_suffix, xml_file_prefix, local_data_folder, json_file_prefix,
                          get_software_name_and_version)


# logging.basicConfig(filename=os.path.join('..', 'data', f'unitest_error_{str(datetime.datetime.strftime(datetime.datetime.now(), "%Y-%m-%d-%H-%M-%S"))}'),
#                     level=logging.DEBUG, format='%(asctime)s %(levelname)s %(name)s %(message)s')
LOGGER=logging.getLogger(__name__)


class SwitchToJsonTest(unittest.TestCase):
    @classmethod
    def populate_json(cls):
        cveStartYear = 2010
        year = 2011
        parsed_data = {}
        for x in range(cveStartYear, year):
            parser = CVESJsonParser()
            getfile = json_file_prefix + str(x) + json_file_suffix
            local_json_file_path = os.path.join(local_data_folder, getfile)

            if (not os.path.exists(local_json_file_path)) or os.path.getsize(local_json_file_path) == 0:
                try:
                    (data_file, r) = Configuration.getFile(Configuration.getFeedURL('cve_json') + getfile)
                    with open(os.path.join(local_data_folder, getfile), 'wb') as file_to_write:
                        data = data_file.read()
                        file_to_write.write(data)
                except:
                    sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (
                                Configuration.getFeedURL('cve') + getfile))

            #local_json_file_path = os.path.join(os.path.dirname(__file__), '../data/2019_1to6.json')
            with open(local_json_file_path, 'r') as json_file:
                parser.parse(json_file)

                for item in parser.cves:
                    if 'cvss' in item:
                        item['cvss'] = float(item['cvss'])
                # check if year is not cve-free
                if len(parser.cves) != 0:
                    print("Importing JSON CVEs for year " + str(x))
                    #ret = db.insertCVE(ch.cves)
                else:
                    print("Year " + str(x) + " has no CVE's.")

                parsed_data[x] = parser.cves
        return parsed_data

    @classmethod
    def populate_xml(cls):
        cveStartYear = 2010
        year = 2011
        parsed_data = {}
        for x in range(cveStartYear, year):
            parser = make_parser()
            ch = CVEHandler()
            parser.setContentHandler(ch)
            getfile = xml_file_prefix + str(x) + xml_file_suffix
            local_xml_file_path = os.path.join(local_data_folder, getfile)

            if (not os.path.exists(local_xml_file_path)) or os.path.getsize(local_xml_file_path) == 0:
                try:
                    (data_file, r) = Configuration.getFile(Configuration.getFeedURL('cve_xml') + getfile)
                    with open(os.path.join(local_data_folder, getfile), 'wb') as file_to_write:
                        data = data_file.read()
                        file_to_write.write(data)
                except:
                    sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (
                                Configuration.getFeedURL('cve') + getfile))
            #local_xml_file_path = os.path.join(os.path.dirname(__file__), '../data/2019_1to6.xml')
            with open(local_xml_file_path, 'r') as xml_file:
                parser.parse(xml_file)

                for item in ch.cves:
                    if 'cvss' in item:
                        item['cvss'] = float(item['cvss'])
                # check if year is not cve-free
                if len(ch.cves) != 0:
                    print("Importing XML CVEs for year " + str(x))
                    #ret = db.insertCVE(ch.cves)
                else:
                    print("Year " + str(x) + " has no CVE's.")
                parsed_data[x] = ch.cves
        return parsed_data

    @classmethod
    def setUpClass(cls):
        pass
        cls.json_version = cls.populate_json()
        cls.xml_version = cls.populate_xml()


    def test_references(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                for reference in xml_item['references']:
                    try:
                        self.assertIn(reference, json_item['references'])
                    except AssertionError as asserion_error:
                        LOGGER.debug('Reference missing in CVE ID: '+json_item["id"]+' for year: {year} '
                                     'Missing Reference was: '+reference)
                        # raise AssertionError(asserion_error)

    def test_vulnerable_configuration(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                for configuration in xml_item['vulnerable_configuration']:
                    try:
                        self.assertIn(configuration, json_item['vulnerable_configuration'])
                    except AssertionError as assertion_error:
                        LOGGER.debug('Vulnerable Configuration missing in CVE ID: '+json_item["id"]+' for year: '+str(year)+' Missing'
                                     'configuration was: '+configuration+' for {list_of_vuln_config}'.format(
                            list_of_vuln_config=json_item["vulnerable_configuration"]
                        ))  #for {json_item["vulnerable_configuration"][:10]}

    def test_vulnerable_product(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                for product in xml_item['vulnerable_product']:
                    temp = ''
                    try:
                        temp = ':'.join([x for x in product.split(':')[2:5] if x != ""])
                        self.assertIn(temp, json_item['vulnerable_product'])
                    except AssertionError as assertion_error:
                        LOGGER.debug('Vulnerable Product missing in CVE ID: '+json_item["id"]+' for year: {year} '
                                     'Missing product was: '+product+', temp was '+temp)


    def test_cwe(self):
        # there are two cwe values what to do here.
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                self.assertEqual(xml_item['id'], json_item['id'])

                try:
                    self.assertEqual(xml_item['cwe'], json_item['cwe'])
                except AssertionError as assertion_error:
                    LOGGER.debug('CWE Error in CVE ID: '+json_item["id"]+' for year: '+str(year)+', error was: '+str(assertion_error))
                except KeyError as key_error:
                    if 'cwe' not in xml_item and 'cwe' not in json_item:
                        pass
                    else:
                        LOGGER.debug('CWE Key Error in CVE ID: '+json_item["id"]+' for year: '+str(year)+', error was '+str(key_error))

    def test_db_match(self):
        from pymongo import MongoClient
        client_json = MongoClient('mongodb://localhost:27017')
        db_json = client_json.cvedb
        json_count = db_json.cves.count_documents({})
        print(json_count)

        print('\n\n\n')

        client_xml = MongoClient('mongodb://localhost:27010')
        db_xml = client_xml.cvedb
        xml_documents = db_xml.cves.find({})
        max_count = 10
        count_of_documents_missing = 0
        count = 0
        for xml_document in xml_documents:
            count += 1
            cve_json = db_json.cves.find_one({'id': xml_document['id']})
            if (cve_json) is None:
                print(xml_document['id'])
                count_of_documents_missing += 1
                if count_of_documents_missing >= max_count:
                    print('breaking out')
                    break
        print('ending xml_documents: {count}'.format(count=count))




    def test_cvss(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                try:
                    self.assertEqual(xml_item['cvss'], json_item['cvss'])
                except AssertionError as assertion_error:
                    LOGGER.debug('CVSS Error in CVE ID: '+json_item["id"]+' for year: '+str(year)+', error was: '+str(assertion_error))
                    #raise AssertionError(assertion_error)
                except KeyError:
                    pass

    def test_access(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                try:
                    self.assertDictEqual(xml_item['access'], json_item['access'])
                except AssertionError as assertion_error:
                    LOGGER.debug('ACCESS Error in CVE ID: '+json_item["id"]+' for year: '+str(year)+', error was: '+str(assertion_error))
                    #raise AssertionError(assertion_error)
                except KeyError:
                    pass

    def test_impact(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                try:
                    self.assertDictEqual(xml_item['impact'], json_item['impact'])
                except AssertionError as assertion_error:
                    LOGGER.debug('IMPACT Error in CVE ID: '+json_item["id"]+' for year: '+year+', error was: '+str(assertion_error))
                    #raise AssertionError(assertion_error)
                except KeyError:
                    pass

    def test_summary(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                try:
                    self.assertEqual(xml_item['summary'], json_item['summary'])
                except AssertionError as assertion_error:
                    LOGGER.debug('SUMMARY Error in CVE ID: '+json_item["id"]+' for year: '+str(year)+', error was: '+str(assertion_error))
                    #raise AssertionError(assertion_error)


    def test_all_fields_exist(self):
        for year in self.xml_version.keys():
            for xml_item, json_item in zip(self.xml_version[year], self.json_version[year]):
                for key in xml_item:
                    if key != 'cvss-time':
                        try:
                            self.assertIn(key, json_item)
                        except AssertionError as assertion_error:
                            LOGGER.debug('ATTRIBUTE missing in '+json_item["id"]+' for year: '+str(year)+', attribute name: '+key)

    @unittest.skip('Dates are different between the xml and json files')
    def test_published_modified_dates(self):
        for xml_item, json_item in zip(self.xml_version, self.json_version):
            try:
                self.assertEqual(xml_item['Published'].date(), json_item['Published'].date())
                self.assertEqual(xml_item['Modified'].date(), json_item['Modified'].date())
                self.assertEqual(xml_item['summary'], json_item['summary'])
            except AssertionError as assertion_error:
                logging.error('Error was in CVE ID: '+json_item["id"])
                raise AssertionError(assertion_error)

    @unittest.skip
    def test_list_sorting(self):
        sorting_list = ['2.6.20.10', '3.14.48', '2.6.28.10', '4.1.35', '4.3.0', '2.6.33.3', '3.4.46', '3.10.99',
                        '2.2.3', '2.6.34:git1', '4.11:rc4', '2.6.27.47', '2.6.23:rc1', '3.2.6', '2.0.7', '2.6.11.2',
                        '2.6.39.2', '2.0.13', '3.10.96', '4.12.1', '4.9.104', '4.9.127', '2.6.34:git3', '2.5.29',
                        '2.1.3', '2.6.16.31:-rc3', '2.6.12.2', '3.0.6', '2.0.25', '4.9.32', '3.18.5', '3.12.43',
                        '2.6.24:rc4', '2.6.10:rc1', '4.1.24', '4.17.7', '2.3.39', '3.2.76', '3.4.4', '3.10.94',
                        '4.9:rc8', '4.9.128', '3.17.2', '3.4.71', '4.14.49', '2.6.32.24', '3.14.45', '3.18.50',
                        '4.19:rc6', '2.4.18::pre-3', '4.9.38', '4.9.9', '4.18:rc3', '3.10.26', '2.4.33.1', '4.9.76',
                        '2.4.37.1', '2.4.27:pre3', '3.12.32', '2.0.1', '4.9.110', '2.6.11:rc1:bk6', '4.9.58', '4.19.5',
                        '2.1.113', '2.3.99:pre2', '2.6.22.21', '2.6.16.27', '3.4.93', '2.6.31.3', '3.7.8', '3.18.4',
                        '2.6.27.13', '2.6.27.51', '4.19.19', '3.14.35', '4.4.60', '2.1.30', '3.2.40', '2.6.28.3',
                        '3.10.13', '4.9.88', '3.0.15', '3.4.1', '2.5.32', '2.5.51', '3.14.34', '2.6.38.6', '3.5.5',
                        '2.4.23', '4.10.7', '3.2.3', '4.13:rc1', '2.6.25.17', '3.4:rc1', '2.6.14.2', '4.4.79', '4.4.32',
                        '2.6.16.39', '2.6.27.45', '3.0.39', '3.0.99', '3.10.101', '2.3.26', '4.9.4', '3.13.4', '4.1.16',
                        '3.2.44', '2.6.30:rc1', '3.10.56', '2.6.16.22', '2.6.31:rc2', '3.0.95', '4.1:rc1',
                        '2.6.21:git3', '2.1.57', '4.4.96', '2.1.115', '3.0.32', '2.6.22.15', '3.18.45', '4.18.14',
                        '3.10.27', '4.9.137', '2.6.16.50', '4.4:rc2', '3.2', '4.4.102', '3.10.37', '4.16:rc6', '3.2.48',
                        '2.4.18:pre5', '2.2.17', '4.1:rc8', '4.19.1', '3.10.31', '3.4.68', '4.11:rc1', '2.2.22:rc3',
                        '2.6.23:rc8', '2.6.24']

        list_to_sort = ['2012.10.04', '2011.08.13', '2012.04.26', '2011.09.02', '2012.12.23', '2014.01.19',
                        '2013.07.31', '2013.11.26', '2014.01.21', '2012.01.07', '2012.02.29', '2012.06.17',
                        '2012.08.17', '2013.04.01', '2011.07.21', '2011.08.20', '2013.12.31', '2011.07.15',
                        '2011.11.27', '2013.04.05', '2011.11.28', '2013.10.22', '2013.10.11', '2013.12.18',
                        '2013.10.16', '2013.03.23', '2013.01.04', '2012.10.18', '2013.06.30', '2013.10.07',
                        '2013.12.04', '2014.01.11', '2012.02.04', '2012.10.22', '2013.12.17', '2012.05.17',
                        '2011.12.23', '2012.09.12', '2013.01.23', '2014.01.17', '2013.04.16', '2012.10.01',
                        '2012.07.06', '2012.08.29', '2013.03.31', '2012.05.11', '2014.01.13', '2012.12.21',
                        '2013.11.14', '2013.11.06', '2011.12.20', '2012.04.18', '2012.07.03', '2012.11.17',
                        '2013.04.29', '2012.11.05', '2012.08.28', '2013.10.01', '2013.04.08', '2014.01.15',
                        '2012.08.31', '2012.11.08', '2012.07.18', '2013.12.15', '2012.04.04', '2013.01.05',
                        '2012.07.26', '2013.09.27', '2012.12.15', '2013.12.16', '2013.04.04', '2012.03.20',
                        '2012.06.12', '2013.01.15', '2011.12.02', '2012.06.26', '2013.08.05', '2013.12.29',
                        '2011.10.27', '2012.11.22', '2013.07.03', '2012.10.21', '2013.05.30', '2012.12.22',
                        '2013.01.21', '2013.07.30', '2012.08.30', '2012.09.06', '2011.11.29', '2012.01.25',
                        '2013.02.11', '2013.06.18', '2013.10.18', '2011.10.18', '2013.09.30', '2013.12.05',
                        '2013.08.28', '2013.09.11', '2013.04.30', '2012.09.27', '2014.01.14', '2013.07.16',
                        '2012.07.24', '2012.11.28', '2013.01.19', '2013.11.25', '2013.12.21', '2013.10.09',
                        '2014.01.16', '2013.10.24', '2012.08.08', '2011.11.20', '2011.09.19', '2012.12.24',
                        '2013.08.31', '2013.11.29', '2013.11.15', '2012.08.20', '2012.12.18', '2014.01.20',
                        '2011.08.22', '2011.07.18', '2013.10.03', '2012.04.27', '2013.10.25', '2012.11.16',
                        '2013.08.16', '2012.09.13', '2012.04.21', '2013.06.14', '2013.02.27', '2013.08.15',
                        '2011.10.05', '2013.09.07', '2013.09.18', '2011.11.02', '2013.06.06', '2012.11.29',
                        '2013.10.02', '2012.06.23', '2014.01.07', '2012.09.11', '2012.01.13', '2013.01.18',
                        '2012.10.12', '2012.10.24', '2012.01.26', '2012.02.03', '2013.01.22', '2013.04.21',
                        '2011.07.15a', '2012.07.14', '2012.08.12', '2012.10.11', '2013.04.06', '2011.10.09',
                        '2014.01.18', '2013.10.08', '2011.12.19', '2013.09.08', '2012.10.17', '2013.01.25',
                        '2013.01.03', '2013.12.03', '2014.01.24', '2012.09.07', '2013.03.07', '2012.05.03',
                        '2012.10.16', '2013.04.23', '2012.11.30', '2013.11.10', '2012.03.22', '2011.11.08',
                        '2013.02.05', '2013.04.22']

        sorter = CVESJsonParser()
        sorted_list = sorter.sort_list_of_versions(list_to_sort)
        print('temo')






    @unittest.skip
    def test_fix_version_issue(self):
        inputs = ['2.5.6.4rc', '2.5.6.4', '2.5.6.4_rc', '2.5.6.4-rc', '2.5.6.4.rc']
        outputs = ['2.5.6.4:rc', '2.5.6.4', '2.5.6.4:rc', '2.5.6.4:rc', '2.5.6.4:rc']

        for input, output in zip(inputs, outputs):
            self.assertEqual(self.fix_version(input), output)

    @unittest.skip
    def test_get_software_name_version(self):
        inputs = ['cpe:/o:microsoft:windows_95']
        expected_outputs = ['microsoft:windows_95']

        for input, output in zip(inputs, expected_outputs):
            self.assertEqual(get_software_name_and_version(input), output)


if __name__ == '__main__':
    #logging.basicConfig(level=logging.DEBUG)

    unittest.main()


#    def test_enumerate_versions(self):
#     import json
#     input = json.loads('{'
#                        '  "vulnerable" : true,'
#                        '  "cpe23Uri" : "cpe:2.3:a:cisco:network_admission_control_manager_and_server_system_software:*:*:*:*:*:*:*:*",'
#                        '  "versionStartExcluding" : "3.6.0.1",'
#                        '  "versionEndExcluding" : "3.6.4.2"'
#                        '}')
#     cpe_strings = []
#     if ('versionStartIncluding' in input or 'versionStartExcluding' in input) and \
#             ('versionEndIncluding' in input or 'versionEndExcluding' in input):
#         cpe_pieces = input['cpe23Uri'].split(':')
#         software_name = ''
#         for index in range(3, len(cpe_pieces)):
#             if cpe_pieces[index] == '*':
#                 break
#             else:
#                 software_name += f'{cpe_pieces[index]}' if software_name == '' else f':{cpe_pieces[index]}'
#
#         list_of_versions = sorted(all_software_version[software_name])
#         list_of_vulnerable_versions = []
#         version_in_range = False
#         for version in list_of_versions:
#             try:
#                 if version >= input['versionStartIncluding']:
#                     version_in_range = True
#             except KeyError:
#                 if version > input['versionStartExcluding']:
#                     version_in_range = True
#
#             try:
#                 if version > input['versionEndIncluding']:
#                     version_in_range = False
#             except KeyError:
#                 if version >= input['versionEndExcluding']:
#                     version_in_range = False
#
#             if version_in_range:
#                 list_of_vulnerable_versions.append(
#                     f'{cpe_pieces[0]}:{cpe_pieces[1]}:{cpe_pieces[2]}:{software_name}:{version}')
#
#
#         cpe_strings.extend(list_of_vulnerable_versions)
#
#
#     elif 'versionStartIncluding' not in input and 'versionEndIncluding' in input:
#         # Handle options:
#         # software_name:*:*:* -> software_name:version
#         # software_name:*:*:some-text:*:* -> software_name:version::some-text
#         index_of_first_asterisk = input['cpe23Uri'].find('*')
#         cpe_entry = input['cpe23Uri'][:index_of_first_asterisk] + input['versionEndIncluding']
#         cpe_strings.append(cpe_entry)
#     else:
#         index_of_first_asterisk = input['cpe23Uri'].find('*')
#         cpe_strings.append(input['cpe23Uri'] if index_of_first_asterisk == -1
#                            else input['cpe23Uri'][:index_of_first_asterisk])
#
#     assert 3 == 3
# # '  "versionStartIncluding" : "3.6.0.0",'

