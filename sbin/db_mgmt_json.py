#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Manager for the database for the NVD JSON Files
#
# Current import is mapping all the old XML scheme from the NVD JSON files (WiP)
#
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2019 	Alexandre Dulaunoy - a@foo.be

# Imports
# make sure these modules are available on your system
import os

import requests
import sys
import hashlib

from lib.ArchiveManager import ArchiveManager
from lib.DownloadManager import DownloadManager
from lib.JSONLoader import JSONLoader

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import argparse
import datetime
import json
from bson import json_util
import tempfile
from dateutil.parser import parse as parse_datetime

from lib.ProgressBar import progressbar
from lib.Toolkit import toStringFormattedCPE
from lib.Config import Configuration
import lib.DatabaseLayer as db

# parse command line arguments
argparser = argparse.ArgumentParser(description='populate/update the local CVE database')
argparser.add_argument('-u', action='store_true', help='update the database')
argparser.add_argument('-p', action='store_true', help='populate the database')
argparser.add_argument('-a', action='store_true', default=False, help='force populating the CVE database')
argparser.add_argument('-f', action='store_true', default=False, help='force update of the CVE database')
argparser.add_argument('-v', action='store_true', help='verbose output')
args = argparser.parse_args()

# init parts of the file names to enable looped file download
file_prefix = "nvdcve-1.0-"
file_suffix = ".json.gz"
file_mod = "modified"
file_rec = "recent"

date = datetime.datetime.now()
year = date.year + 1

# default config
defaultvalue = {}
defaultvalue['cwe'] = "Unknown"

cveStartYear = Configuration.getCVEStartYear()


def get_cpe_info(cpeuri):
    query = {}
    version_info = ""
    if "versionStartExcluding" in cpeuri:
        query["versionStartExcluding"] = cpeuri["versionStartExcluding"]
        version_info += query["versionStartExcluding"]
    if "versionStartIncluding" in cpeuri:
        query["versionStartIncluding"] = cpeuri["versionStartIncluding"]
        version_info += query["versionStartIncluding"]
    if "versionEndExcluding" in cpeuri:
        query["versionEndExcluding"] = cpeuri["versionEndExcluding"]
        version_info += query["versionEndExcluding"]
    if "versionEndIncluding" in cpeuri:
        query["versionEndIncluding"] = cpeuri["versionEndIncluding"]
        version_info += query["versionEndIncluding"]

    return query, version_info


def add_if_missing(cve, key, value):
    if value not in cve[key]:
        cve[key].append(value)
    return cve


def process_cve_item(item=None):
    if item is None:
        return None
    cve = {}
    cve['id'] = item['cve']['CVE_data_meta']['ID']
    cve['assigner'] = item['cve']['CVE_data_meta']['ASSIGNER']
    cve['Published'] = parse_datetime(item['publishedDate'], ignoretz=True)
    cve['Modified'] = parse_datetime(item['lastModifiedDate'], ignoretz=True)
    for description in item['cve']['description']['description_data']:
        if description['lang'] == 'en':
            if "summary" in cve:
                cve['summary'] += " {}".format(description['value'])
            else:
                cve['summary'] = description['value']
    if 'impact' in item:
        cve['access'] = {}
        cve['impact'] = {}
        if 'baseMetricV2' in item['impact']:
            cve['access']['authentication'] = item['impact']['baseMetricV2']['cvssV2']['authentication']
            cve['access']['complexity'] = item['impact']['baseMetricV2']['cvssV2']['accessComplexity']
            cve['access']['vector'] = item['impact']['baseMetricV2']['cvssV2']['accessVector']
            cve['impact']['availability'] = item['impact']['baseMetricV2']['cvssV2']['availabilityImpact']
            cve['impact']['confidentiality'] = item['impact']['baseMetricV2']['cvssV2']['confidentialityImpact']
            cve['impact']['integrity'] = item['impact']['baseMetricV2']['cvssV2']['integrityImpact']
            cve['cvss'] = float(item['impact']['baseMetricV2']['cvssV2']['baseScore'])
            cve['cvss-time'] = parse_datetime(item['lastModifiedDate'],
                                              ignoretz=True)  # NVD JSON lacks the CVSS time which was present in the original XML format
            cve['cvss-vector'] = item['impact']['baseMetricV2']['cvssV2']['vectorString']
        else:
            cve['cvss'] = float(5)
    if 'references' in item['cve']:
        cve['references'] = []
        for ref in item['cve']['references']['reference_data']:
            cve['references'].append(ref['url'])
    if 'configurations' in item:
        cve['vulnerable_configuration'] = []
        cve['vulnerable_product'] = []
        for cpe in item['configurations']['nodes']:
            if 'cpe_match' in cpe:
                for cpeuri in cpe['cpe_match']:
                    if cpeuri['vulnerable']:
                        query, version_info = get_cpe_info(cpeuri)
                        if query != {}:
                            query["id"] = hashlib.sha1(
                                cpeuri["cpe23Uri"].encode("utf-8") + version_info.encode("utf-8")).hexdigest()
                            cpe_info = db.getCPEVersionInformation(query)
                            if cpe_info:
                                if cpe_info["cpe_name"]:
                                    for vulnerable_version in cpe_info["cpe_name"]:
                                        cve = add_if_missing(cve, "vulnerable_product", vulnerable_version["cpe23Uri"])
                                        cve = add_if_missing(cve, "vulnerable_configuration",
                                                             vulnerable_version["cpe23Uri"])
                                else:
                                    cve = add_if_missing(cve, "vulnerable_product", cpeuri["cpe23Uri"])
                                    cve = add_if_missing(cve, "vulnerable_configuration", cpeuri["cpe23Uri"])
                        else:
                            # If the cpe_match did not have any of the version start/end modifiers,
                            # add the CPE string as it is.
                            cve = add_if_missing(cve, "vulnerable_product", cpeuri["cpe23Uri"])
                            cve = add_if_missing(cve, "vulnerable_configuration", cpeuri["cpe23Uri"])
                    else:
                        cve = add_if_missing(cve, "vulnerable_configuration", cpeuri["cpe23Uri"])
            if 'children' in cpe:
                for child in cpe['children']:
                    if 'cpe_match' in child:
                        for cpeuri in child['cpe_match']:
                            if cpeuri['vulnerable']:
                                query, version_info = get_cpe_info(cpeuri)
                                if query != {}:
                                    query["id"] = hashlib.sha1(
                                        cpeuri["cpe23Uri"].encode("utf-8") + version_info.encode("utf-8")).hexdigest()
                                    cpe_info = db.getCPEVersionInformation(query)
                                    if cpe_info:
                                        if cpe_info["cpe_name"]:
                                            for vulnerable_version in cpe_info["cpe_name"]:
                                                cve = add_if_missing(cve, "vulnerable_product",
                                                                     vulnerable_version["cpe23Uri"])
                                                cve = add_if_missing(cve, "vulnerable_configuration",
                                                                     vulnerable_version["cpe23Uri"])
                                        else:
                                            cve = add_if_missing(cve, "vulnerable_product", cpeuri["cpe23Uri"])
                                            cve = add_if_missing(cve, "vulnerable_configuration", cpeuri["cpe23Uri"])
                                else:
                                    # If the cpe_match did not have any of the version start/end modifiers,
                                    # add the CPE string as it is.
                                    cve = add_if_missing(cve, "vulnerable_product", cpeuri["cpe23Uri"])
                                    cve = add_if_missing(cve, "vulnerable_configuration", cpeuri["cpe23Uri"])
                            else:
                                cve = add_if_missing(cve, "vulnerable_configuration", cpeuri["cpe23Uri"])
    if 'problemtype' in item['cve']:
        for problem in item['cve']['problemtype']['problemtype_data']:
            for cwe in problem[
                'description']:  # NVD JSON not clear if we can get more than one CWE per CVE (until we take the last one) - NVD-CWE-Other??? list?
                if cwe['lang'] == 'en':
                    cve['cwe'] = cwe['value']
        if not ('cwe' in cve):
            cve['cwe'] = defaultvalue['cwe']
    else:
        cve['cwe'] = defaultvalue['cwe']
    cve['vulnerable_configuration_cpe_2_2'] = []
    return cve


def checkDataType(dataType: str):
    if dataType != 'CVE':
        print('JSON data type is not CVE but {}'.format(dataType))


def cveItemPopulateCallBack(cve: dict):
    print("CVE Item CallBack")

    item = process_cve_item(item=cve)
    if args.v:
        print(json.dumps(item, default=json_util.default))
    ret = db.insertCVE(item)


def cveItemUpdateCallBack(cve: dict):
    item = process_cve_item(item=cve)
    # check if the CVE already exists.
    x = db.getCVE(item['id'])
    # if so, update the entry.
    if x:
        if args.v:
            print('Update: {}'.format(item['id']))
            print(item)
        db.updateCVE(item)
    else:
        if args.v:
            print('Insert: {}'.format(item['id']))
        db.insertCVE(item)


if __name__ == '__main__':
    if args.u:
        # get the 'modified' file
        getfile = file_prefix + file_mod + file_suffix
        try:
            feedUrl = Configuration.getFeedURL('cve') + getfile
            path = os.path.join(tempfile.gettempdir(), getfile)

            DownloadManager.download(feedUrl, path)
            file = ArchiveManager.extract(path)[0]
        except:
            sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (
                    Configuration.getFeedURL("cve") + getfile))

        i = db.getInfo("cves")

        response = requests.head(feedUrl)
        last_modified = parse_datetime(response.headers['last-modified'], ignoretz=True)
        if i is not None:
            if last_modified == i['last-modified'] and not args.f:
                print("Not modified")
                sys.exit(0)
        db.setColUpdate("cves", last_modified)

        JSONLoader.load(file, "CVE_Items.item", cveItemUpdateCallBack)
    elif args.p:
        c = db.getSize('cves')
        if args.v:
            print(str(c))
        if c > 0 and args.a is False:
            print("CVEs collection already populated")
        else:
            print("CVEs collection population started")
            db.dropCollection("cve")
            for x in range(cveStartYear, year):
                getfile = file_prefix + str(x) + file_suffix
                try:
                    feedUrl = Configuration.getFeedURL('cve') + getfile
                    path = os.path.join(tempfile.gettempdir(), getfile)

                    DownloadManager.download(feedUrl, path)
                    file = ArchiveManager.extract(path)[0]
                except:
                    sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (
                            Configuration.getFeedURL('cve') + getfile))

                print("Importing CVEs for year {}".format(str(x)))

                JSONLoader.load(file, "CVE_data_type", checkDataType)
                JSONLoader.load(file, "CVE_Items.item", cveItemPopulateCallBack)
