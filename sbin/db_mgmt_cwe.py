#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Import script of NIST CWE Common Weakness Enumeration.
#
# Until now, the import is only import Weakness description.
#
# The format is the following:
#
# { "_id" : ObjectId("52b70521b261026f36818515"), "weaknessabs" : "Variant",
# "name" : "ASP.NET Misconfiguration: Missing Custom Error Page",
# "description_summary" : "An ASP .NET application must enable custom error
# pages in order to prevent attackers from mining information from the
# framework's built-in responses.An ASP .NET application must enable custom
# error pages in order to prevent attackers from mining information from the
# framework's built-in responses.", "status" : "Draft", "id" : "12" }
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2013-2018  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2015-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from dateutil.parser import parse as parse_datetime

from xml.sax import make_parser
from xml.sax.handler import ContentHandler
import argparse
import zipfile
import tempfile

from lib.ProgressBar import progressbar
from lib.Config import Configuration
import lib.DatabaseLayer as db

argparser = argparse.ArgumentParser(description='populate/update NIST CWE Common Weakness Enumeration database')
argparser.add_argument('-v', action='store_true', help='verbose output')
argparser.add_argument('-f', action='store_true', help='force update')
args = argparser.parse_args()


class CWEHandler(ContentHandler):
    def __init__(self):
        self.cwe = []
        self.description_tag = False
        self.category_tag = False
        self.weakness_tag = False
        self.weakness_relationships_tag = False
        self.relationship_tag = False
        self.relationship_views_tag = False
        self.relationship_view_tag = False
        self.relationship_target_tag = False
        self.relationship_nature_tag = False
        self.relationship_id_tag = False

    def startElement(self, name, attrs):

        if name == 'Weakness':
            self.weakness_tag = True
            self.statement = ""
            self.weaknessabs = attrs.get('Abstraction')
            self.name = attrs.get('Name')
            self.idname = attrs.get('ID')
            self.status = attrs.get('Status')
            self.cwe.append({'name': self.name, 'id': self.idname, 'status': self.status,
                             'weaknessabs': self.weaknessabs})
        elif name == 'Category':
            self.category_tag = True
            self.category_name = attrs.get('Name')
            self.category_id = attrs.get('ID')
            self.category_status = attrs.get('Status')
            self.cwe.append({
                'name': self.category_name,
                'id': self.category_id,
                'status': self.category_status,
                'weaknessabs': 'Category'
            })

        elif name == 'Description' and self.weakness_tag:
            self.description_tag = True
            self.description = ""

        elif name == 'Summary' and self.category_tag:
            self.description_tag = True
            self.description = ""

        elif name == 'Relationships' and (self.weakness_tag or self.category_tag):
            self.weakness_relationships_tag = True
            self.relationships = []

        elif name == 'Relationship' and self.weakness_relationships_tag:
            self.relationship_tag = True
            self.relationship = {}

        elif name == 'Relationship_Views' and self.relationship_tag:
            self.relationship_views_tag = True
            self.relationship_views = []

        elif name == 'Relationship_View_ID' and self.relationship_views_tag:
            self.relationship_view_tag = True
            self.relationship_view_id = ""

        elif name == 'Relationship_Target_Form' and self.relationship_tag:
            self.relationship_target_tag = True
            self.relationship_target = ""
        elif name == 'Relationship_Nature' and self.relationship_tag:
            self.relationship_nature_tag = True
            self.relationship_nature = ""
        elif name == 'Relationship_Target_ID' and self.relationship_tag:
            self.relationship_id_tag = True
            self.relationship_id = ""

    def characters(self, ch):
        if self.description_tag:
            self.description += ch.replace("       ", "")
        if self.relationship_view_tag:
            self.relationship_view_id += ch.replace("       ", "")
        if self.relationship_target_tag:
            self.relationship_target += ch.replace("       ", "")
        if self.relationship_nature_tag:
            self.relationship_nature += ch.replace("       ", "")
        if self.relationship_id_tag:
            self.relationship_id += ch.replace("       ", "")

    def endElement(self, name):
        if name == 'Description' and self.weakness_tag:
            self.description_tag = False
            self.description = self.description + self.description
            self.cwe[-1]['Description'] = self.description.replace("\n", "")
        if name == 'Summary' and self.category_tag:
            self.description_tag = False
            self.description = self.description + self.description
            self.cwe[-1]['Description'] = self.description.replace("\n", "")
        elif name == 'Weakness' and self.weakness_tag:
            self.weakness_tag = False
        elif name == 'Category' and self.category_tag:
            self.category_tag = False

        elif name == 'Relationships' and self.weakness_tag:
            self.weakness_relationships_tag = False
            self.cwe[-1]['relationships'] = self.relationships
        elif name == 'Relationships' and self.category_tag:
            self.weakness_relationships_tag = False
            self.cwe[-1]['relationships'] = self.relationships

        elif name == 'Relationship' and self.weakness_relationships_tag:
            self.relationship_tag = False
            self.relationships.append(self.relationship)

        elif name == 'Relationship_View_ID' and self.relationship_tag:
            self.relationship_view_tag = False
            self.relationship_views.append(self.relationship_view_id)

        elif name == 'Relationship_Views' and self.relationship_views_tag:
            self.relationship_views_tag = False
            self.relationship['view_id'] = self.relationship_views

        elif name == 'Relationship_Target_Form' and self.relationship_tag:
            self.relationship_target_tag = False
            self.relationship_target = self.relationship_target
            self.relationship['weaknessabs'] = self.relationship_target

        elif name == 'Relationship_Nature' and self.relationship_tag:
            self.relationship_nature_tag = False
            self.relationship_nature = self.relationship_nature
            self.relationship['nature'] = self.relationship_nature

        elif name == 'Relationship_Target_ID' and self.relationship_tag:
            self.relationship_id_tag = False
            self.relationship_id = self.relationship_id
            self.relationship['cwe_id'] = self.relationship_id


# make parser
parser = make_parser()
ch = CWEHandler()
parser.setContentHandler(ch)
# check modification date
try:
    (f, r) = Configuration.getFeedData('cwe')
except Exception as e:
    print(e)
    sys.exit("Cannot open url %s. Bad URL or not connected to the internet?" % (Configuration.getFeedURL("cwe")))
lastmodified = parse_datetime(r.headers['last-modified'], ignoretz=True)
i = db.getLastModified('cwe')
if i is not None and not args.f:
    if lastmodified == i:
        print("Not modified")
        sys.exit(0)


# parse xml and store in database
parser.parse(f)
cweList = []


for cwe in progressbar(ch.cwe):
    cwe['Description'] = cwe['Description'].replace("\t\t\t\t\t", " ")
    if args.v:
        print (cwe)
    cweList.append(cwe)

db.bulkUpdate('cwe', cweList)

#update database info after successful program-run
db.setColUpdate('cwe', lastmodified)
