#!/usr/bin/env python3.1
# -*- coding: utf-8 -*-
#
# Tool to dump in JSON the database along with the associated ranking
#
# Software is free software released under the "Modified BSD license"
#
# Copyright (c) 2012-2013 Alexandre Dulaunoy - a@foo.be


import pymongo
import os
import json
from bson import json_util

connect = pymongo.Connection()
db = connect.cvedb
collection = db.cves

def lookupcpe(cpeid = None):
    e = db.cpe.find_one({'id': cpeid})
    if e is None:
        return cpeid
    if 'id' in e:
        return e['title']

def findranking(cpe = None, loosy = True):
    if cpe is None:
        return False
    r = db.ranking
    result = False
    if loosy:
        for x in cpe.split(':'):
            if x is not '':
                i = r.find_one({'cpe': {'$regex':x}})
            if i is None:
                continue
            if 'rank' in i:
                result = i['rank']
    else:
        i = r.find_one({'cpe': {'$regex':cpe}})
        print (cpe)
        if i is None:
            return result
        if 'rank' in i:
            result = i['rank']

    return result


def dumpallcveid ():
    cveid = []
    for x in collection.find({}).sort('_id',1):
        cveid.append(x['id'])
    return cveid

def getcve (cveid=None):
    if cveid is None:
        return False
    return collection.find_one({'id': cveid})

for cveid in dumpallcveid():
    item = getcve(cveid=cveid)
    title = item['summary'][0:70]
    ranking = []
    for conf in item['vulnerable_configuration']:
        rank = findranking(cpe=conf)
        if rank and rank not in ranking:
            ranking.append(rank)
    item['ranking'] = ranking

    print (json.dumps(item, sort_keys=True, default=json_util.default))
