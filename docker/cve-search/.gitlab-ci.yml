
.default-job-config:
  tags:
    - infra
  cache:
    key: cache
    paths:
      - .cache
      - cache/image
  artifacts:
    expire_in: 1 day
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
  except:
    - tags
    - /^.*argo$/ 
  
.release-job-config:
  tags:
    - infra
  cache:
    key: cache
    paths:
      - .cache
      - cache/image
  artifacts:
    expire_in: 1 day
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
  only:
    - tags
    
stages:
- quality_assurance
- build
- scan
- stage
- release_image

variables:
  TARGET_REGISTRY_IMAGE: $CI_REGISTRY_IMAGE
  DEV_IMAGE_TAG: latest
  DOCKER_VERSION: 18.09.7
  KANIKO_EXECUTOR_VERSION: "debug-v0.14.0"
  BUSYBOX_IMAGE: busybox:1.31.0
  DOCKER_BUILD_OPTS: --build-arg REDIS_HOST=$REDIS_HOST --build-arg MONGO_HOST=$MONGO_HOST 

license-check:
  extends: .default-job-config
  image: $BUSYBOX_IMAGE
  stage: quality_assurance
  script:
    - LICENSE=./Thales_Inner_Source_License_V1.1_-_InnerRestricted_-_Distribution_Not_Controlled.pdf
    - >
      [ -f "$LICENSE" ] || { echo 'LICENSE does not exist.'; exit 1;}
  allow_failure: true
  
docker-hadolint:
  extends: .default-job-config
  image: registry.thalesdigital.io/dssp-ivv-devsecops/ivv-projects/docker/docker-runner-hadolint:1.0
  stage: quality_assurance
  script:
    - mkdir -p reports
    - hadolint -f json Dockerfile > reports/hadolint-$(md5sum Dockerfile | cut -d" " -f1).json
  artifacts:
    name: "linting_$CI_JOB_NAME_$CI_PROJECT_NAME_$CI_COMMIT_REF_SLUG"
    when: on_failure
    paths:
      - "reports/hadolint*"

build:
  extends: .default-job-config
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --cache-dir cache/image --tarPath $CI_PROJECT_DIR/image.tar --no-push --destination image --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG $DOCKER_BUILD_OPTS
  artifacts:
    name: "image_$CI_JOB_NAME_$CI_PROJECT_NAME_$CI_COMMIT_REF_SLUG"
    paths:
      - image.tar

scan:
  extends: .default-job-config
  stage: scan
  image: registry.thalesdigital.io/dssp-ivv-devsecops/ivv-projects/docker/docker-runner-trivy:1.0
  script:
    - trivy --cache-dir .cache/ image --input ./image.tar --format table --template "@contrib/html.tpl" -o report.html --exit-code 1 --severity CRITICAL,HIGH
  artifacts:
    name: "container_scan_$CI_JOB_NAME_$CI_PROJECT_NAME_$CI_COMMIT_REF_SLUG"
    paths:
      - report.html
    when: on_failure
  allow_failure: true
  dependencies: ["build"]

stage:
  extends: .default-job-config
  stage: stage
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane push image.tar $TARGET_REGISTRY_IMAGE:$DEV_IMAGE_TAG
  dependencies: ["build"]

release-image:
  extends: .release-job-config
  stage: release_image
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE:$DEV_IMAGE_TAG $CI_COMMIT_TAG
